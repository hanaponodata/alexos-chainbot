# ChainBot ALEX OS Module Docker Compose
# Development and production deployment

version: '3.8'

services:
  chainbot:
    build: .
    container_name: chainbot-alex-os
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ALEX_OS_CHAINBOT_DATABASE_URL=postgresql://chainbot:chainbot@postgres:5432/chainbot
      - ALEX_OS_CHAINBOT_SECRET_KEY=your-secret-key-here-change-in-production
      - ALEX_OS_CHAINBOT_HOST=0.0.0.0
      - ALEX_OS_CHAINBOT_PORT=8000
      - ALEX_OS_CHAINBOT_LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - chainbot_logs:/var/log/alex_os
      - chainbot_backups:/var/backups/alex_os
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chainbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://10.42.69.208:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: chainbot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=chainbot
      - POSTGRES_USER=chainbot
      - POSTGRES_PASSWORD=chainbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/alembic:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - chainbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainbot -d chainbot"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: chainbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chainbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: chainbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - chainbot
    networks:
      - chainbot-network

  prometheus:
    image: prom/prometheus:latest
    container_name: chainbot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chainbot-network

  grafana:
    image: grafana/grafana:latest
    container_name: chainbot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - chainbot-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chainbot_logs:
    driver: local
  chainbot_backups:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  chainbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
